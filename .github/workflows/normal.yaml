# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Normal Pipeline

permissions: read-all

defaults:
  run:
    shell: bash

on:
  workflow_call:
    inputs:
      is_release:
        required: true
        type: boolean

jobs:
  format:
    environment: ci
    if: ${{ ! inputs.is_release }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-nix
        with:
          cachix_cache_name: "${{ secrets.CACHIX_CACHE_NAME }}"
          cachix_auth_token: "${{ secrets.CACHIX_AUTH_TOKEN }}"
      - name: treefmt
        run: |
          just format --fail-on-change --no-cache ||
          {
            echo "You have not formatted these files: run 'just format' locally!"
            echo "Note: For stability -> run it over Nix: 'just develop just format'"
            echo "=============================================================="
            git diff --name-only
            echo "=============================================================="
          }

  lint:
    environment: ci
    if: ${{ ! inputs.is_release }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-nix
        with:
          cachix_cache_name: "${{ secrets.CACHIX_CACHE_NAME }}"
          cachix_auth_token: "${{ secrets.CACHIX_AUTH_TOKEN }}"
      - name: Lint
        run: |
          just ci just lint

  build:
    environment: ci
    if: ${{ ! inputs.is_release }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - uses: ./.github/actions/setup-nix
        with:
          cachix_cache_name: "${{ secrets.CACHIX_CACHE_NAME }}"
          cachix_auth_token: "${{ secrets.CACHIX_AUTH_TOKEN }}"
      - name: Build
        run: |
          just ci just build

  test:
    environment: ci
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - uses: ./.github/actions/setup-nix
        with:
          cachix_cache_name: "${{ secrets.CACHIX_CACHE_NAME }}"
          cachix_auth_token: "${{ secrets.CACHIX_AUTH_TOKEN }}"
      - name: Test
        run: |
          just ci just test

  package:
    environment: ci
    runs-on: ubuntu-latest
    if: ${{ ! inputs.is_release }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - uses: ./.github/actions/setup-nix
        with:
          cachix_cache_name: "${{ secrets.CACHIX_CACHE_NAME }}"
          cachix_auth_token: "${{ secrets.CACHIX_AUTH_TOKEN }}"

      - name: Build Package (nix)
        run: |
          just ci just nix-package

      - name: Build Container Image (nix)
        run: |
          just ci just nix-image

  deploy:
    environment: ci
    if: ${{ inputs.is_release }}
    needs: [test]
    runs-on: ubuntu-latest
    env:
      CI_IS_RELEASE: true
    permissions:
      contents: write
      packages: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - uses: ./.github/actions/setup-nix
        with:
          cachix_cache_name: "${{ secrets.CACHIX_CACHE_NAME }}"
          cachix_auth_token: "${{ secrets.CACHIX_AUTH_TOKEN }}"

      - name: Create Version Tag
        run: |
          just ci ./tools/ci/assert-tag.sh \
            create-and-check "$GITHUB_REF"

      - name: Build Container Image (nix)
        run: |
          just ci just nix-image

      - name: Push Image
        env:
          REGISTRY_USERNAME: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        run: |
          just ci tools/ci/upload-image.sh

      - name: Push Tag
        run: |
          just ci ./tools/ci/assert-tag.sh push "$GITHUB_REF"

      - name: Cleanup
        if: always()
        run: |
          just ci tools/ci/assert-tag.sh cleanup "$GITHUB_REF"

  release:
    if: ${{ inputs.is_release }}
    needs: ["deploy"]

    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Create Github Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ./tools/ci/create-github-release.sh \
              "${GITHUB_REF#refs/tags/}" \
              "$GITHUB_REPOSITORY"
